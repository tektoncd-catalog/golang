apiVersion: tekton.dev/v1
kind: Task
metadata:
  annotations:
    tekton.dev/catalog: tektoncd.golang
    tekton.dev/catalog-support-tier: verified
    tekton.dev/catalog-url: https://github.com/tektoncd-catalog/golang
    tekton.dev/categories: Testing
    tekton.dev/displayName: golang test
    tekton.dev/pipelines.minVersion: 0.12.1
    tekton.dev/platforms: linux/amd64,linux/s390x,linux/ppc64le
    tekton.dev/signature: MEUCIE67H0hJ5o1jtKScgkXVAdZJWyLaSlM7yHDP19pl24O6AiEA0la1R3oc1k4G5dP0ukJS5gS2I+Djuak2OjVaUqFCnKI=
    tekton.dev/tags: test
  creationTimestamp: null
  labels:
    app.kubernetes.io/version: 1.0.0
  name: golang-test
spec:
  description: This Task is Golang task to test Go projects.
  params:
  - description: package (and its children) under test
    name: package
  - default: ./...
    description: 'packages to test (default: ./...)'
    name: packages
  - default: .
    description: path to the directory to use as context.
    name: context
  - default: latest
    description: golang version to use for tests
    name: version
  - default: -race -cover -v
    description: flags to use for the test command
    name: flags
  - default: linux
    description: running program's operating system target
    name: GOOS
  - default: amd64
    description: running program's architecture target
    name: GOARCH
  - default: auto
    description: value of module support
    name: GO111MODULE
  - default: ""
    description: Go caching directory path
    name: GOCACHE
  - default: ""
    description: Go mod caching directory path
    name: GOMODCACHE
  steps:
  - env:
    - name: GOOS
      value: $(params.GOOS)
    - name: GOARCH
      value: $(params.GOARCH)
    - name: GO111MODULE
      value: $(params.GO111MODULE)
    - name: GOCACHE
      value: $(params.GOCACHE)
    - name: GOMODCACHE
      value: $(params.GOMODCACHE)
    image: docker.io/library/golang:$(params.version)
    name: unit-test
    resources: {}
    script: |
      if [ ! -e $GOPATH/src/$(params.package)/go.mod ];then
         SRC_PATH="$GOPATH/src/$(params.package)"
         mkdir -p $SRC_PATH
         cp -R "$(workspaces.source.path)/$(params.context)"/* $SRC_PATH
         cd $SRC_PATH
      fi
      go test $(params.flags) $(params.packages)
    workingDir: $(workspaces.source.path)
  workspaces:
  - name: source
